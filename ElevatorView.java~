import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.applet.*;
import javax.swing.*;

public class ElevatorView extends JPanel implements ActionListener, ElevatorSimulationListener, ElevatorConstants {
   private static final int VIEW_WIDTH = 800;
   private static final int VIEW_HEIGHT = 435;
   private static final int OFFSET = 10;
   private static final int ANIMATION_DELAY = 50;
   private static final int PERSON_TO_BUTTON_DISTANCE = 400;
   private static final int BUTTON_TO_ELEVATOR_DISTANCE = 50;
   private static final int PERSON_TO_ELEVATOR_DISTANCE = PERSON_TO_BUTTON_DISTANCE + BUTTON_TO_ELEVATOR_DISTANCE;
   private static final int TIME_TO_BUTTON = 3000;
   private static final int TIME_TO_ELEVATOR = 1000;
   private static final int ELEVATOR_TRAVEL_TIME = 5000;
   private static final String doorFrames[] = { "index.png", "index2.png", "index3.png", "index4.png", "index4.png" };
   private static final String personFrames[] = { "index4.jpeg", "index4.jpeg", "index4.jpeg", "index4.jpeg", "index4.jpeg", "index4.jpeg", "index4.jpeg",  "index4.jpeg" };
   private static final String lightFrames[] = { "images6.jpeg", "images7.jpeg" };
   private static final String firstFloorLightFrames[] = { "images6.jpeg", "images7.jpeg" };
   private static final String secondFloorLightFrames[] = { "images6.jpeg", "images7.jpeg" };
   private static final String floorButtonFrames[] = { "images3.png", "index9.jpeg", "images11.jpeg" };
   private static final String elevatorButtonFrames[] = { "index0.jpeg", "index9.jpeg", "images11.jpeg" };
   private static final String bellFrames[] = { "index11.jpeg", "index4.jpeg", "index0.jpeg" };
   private static final String floorImage = "index5.jpeg";
   private static final String ceilingImage = "index5.jpeg";
   private static final String elevatorImage = "index.jpeg";
   private static final String wallImage = "index4.jpeg";
   private static final String elevatorShaftImage = "images8.jpeg";
   private static final String bellSound = "hi.wav";

   private static final String doorOpenSound = "creaking-door-1.wav";
   private static final String doorCloseSound = "door-1-open.wav";
   private static final String elevatorSound = "door-2-open.wav";
   private static final String buttonSound = "welcome.wav";
   private static final String walkingSound = "door-knock-1.wav";
   private static final String elevatorMusicSound = "welcome.wav";

   private ImagePanel firstFloorPanel;
   private ImagePanel secondFloorPanel;
   private ImagePanel elevatorShaftPanel;
   private ImagePanel wallPanel;
   private ImagePanel ceilingPanel;

   private MovingPanel elevatorPanel; 
 
   private AnimatedPanel firstFloorButtonPanel;
   private AnimatedPanel secondFloorButtonPanel;
   private AnimatedPanel elevatorButtonPanel;
   private AnimatedPanel bellPanel; 
   private AnimatedPanel elevatorLightPanel;
   private AnimatedPanel firstFloorLightPanel;
   private AnimatedPanel secondFloorLightPanel;
   private AnimatedPanel doorPanel;

   private java.util.List personAnimatedPanels; 

   private AudioClip bellClip;
   private AudioClip doorOpenClip;
   private AudioClip doorCloseClip;
   private AudioClip elevatorClip;
   private AudioClip buttonClip; 
   private AudioClip walkClip;
   private AudioClip elevatorMusicClip;

   private javax.swing.Timer animationTimer;

   private int firstFloorPosition;
   private int secondFloorPosition;

   private double elevatorVelocity;
   
   public ElevatorView()
   {
      super( null );
      instantiatePanels();
      placePanelsOnView();
      initializeAudio();
      double floorDistance = firstFloorPosition - secondFloorPosition;
      double time = ELEVATOR_TRAVEL_TIME / ANIMATION_DELAY;
      elevatorVelocity = ( floorDistance + OFFSET ) / time;
      startAnimation();
   }

   private void instantiatePanels()
   {
      firstFloorPanel = new ImagePanel( 0, floorImage );
      secondFloorPanel = new ImagePanel( 0, floorImage );

      firstFloorPosition = VIEW_HEIGHT - firstFloorPanel.getHeight();
      secondFloorPosition = ( int ) ( firstFloorPosition / 2 ) - OFFSET;

      firstFloorPanel.setPosition( 0, firstFloorPosition );
      secondFloorPanel.setPosition( 0, secondFloorPosition );

      wallPanel = new ImagePanel( 0, wallImage );
      elevatorShaftPanel = new ImagePanel( 0, elevatorShaftImage );
     
      double xPosition = PERSON_TO_ELEVATOR_DISTANCE + OFFSET;
      double yPosition = firstFloorPosition - elevatorShaftPanel.getHeight();

      elevatorShaftPanel.setPosition( xPosition, yPosition );

      ceilingPanel = new ImagePanel( 0, ceilingImage );
      yPosition = elevatorShaftPanel.getPosition().getY() - ceilingPanel.getHeight();
      ceilingPanel.setPosition( xPosition, yPosition );

      elevatorPanel = new MovingPanel( 0, elevatorImage );
      yPosition = firstFloorPosition - elevatorPanel.getHeight();
      elevatorPanel.setPosition( xPosition, yPosition );

      firstFloorButtonPanel = new AnimatedPanel( 0, floorButtonFrames );
      xPosition = PERSON_TO_BUTTON_DISTANCE + 2 * OFFSET;
      yPosition = firstFloorPosition - 5 * OFFSET;
      firstFloorButtonPanel.setPosition( xPosition, yPosition );

      int floorButtonPressedFrameOrder[] = { 0, 1, 2 };
      firstFloorButtonPanel.addFrameSequence( floorButtonPressedFrameOrder );

      secondFloorButtonPanel = new AnimatedPanel( 1, floorButtonFrames );
      xPosition = PERSON_TO_BUTTON_DISTANCE + 2 * OFFSET;
      yPosition = secondFloorPosition - 5 * OFFSET;
      secondFloorButtonPanel.setPosition( xPosition, yPosition );

      secondFloorButtonPanel.addFrameSequence( floorButtonPressedFrameOrder );

      firstFloorLightPanel = new AnimatedPanel( 0, firstFloorLightFrames );

      xPosition = elevatorPanel.getLocation().x - 4 * OFFSET;
      yPosition = firstFloorButtonPanel.getLocation().y - 10 * OFFSET;
      firstFloorLightPanel.setPosition( xPosition, yPosition );

      secondFloorLightPanel = new AnimatedPanel( 1, secondFloorLightFrames );
      yPosition = secondFloorButtonPanel.getLocation().y - 10 * OFFSET;
      secondFloorLightPanel.setPosition( xPosition, yPosition );

      doorPanel = new AnimatedPanel( 0, doorFrames );
      int doorOpenedFrameOrder[] = { 0, 1, 2, 3, 4 };
      int doorClosedFrameOrder[] = { 4, 3, 2, 1, 0 };
      doorPanel.addFrameSequence( doorOpenedFrameOrder );
      doorPanel.addFrameSequence( doorClosedFrameOrder );
      yPosition = elevatorPanel.getHeight() - doorPanel.getHeight();
      doorPanel.setPosition( 0, yPosition );

      elevatorLightPanel = new AnimatedPanel( 0, lightFrames );
      elevatorLightPanel.setPosition( OFFSET, 5 * OFFSET );

      bellPanel = new AnimatedPanel( 0, bellFrames );
      yPosition = elevatorLightPanel.getPosition().getY() + elevatorLightPanel.getHeight() + OFFSET;
      bellPanel.setPosition( OFFSET, yPosition );
      int bellRingAnimation[] = { 0, 1, 0, 2 };
      bellPanel.addFrameSequence( bellRingAnimation );

      elevatorButtonPanel = new AnimatedPanel( 0, elevatorButtonFrames );
      yPosition = elevatorPanel.getHeight() - 6 * OFFSET;
      elevatorButtonPanel.setPosition( 10 * OFFSET, yPosition );

      int buttonPressedFrameOrder[] = { 0, 1, 2 };
      elevatorButtonPanel.addFrameSequence( buttonPressedFrameOrder );

      personAnimatedPanels = new ArrayList();
   }

   private void placePanelsOnView()
   {
      add( firstFloorPanel );
      add( secondFloorPanel );
      add( ceilingPanel );
      add( elevatorPanel );
      add( firstFloorButtonPanel );
      add( secondFloorButtonPanel );
      add( firstFloorLightPanel );
      add( secondFloorLightPanel );
      add( elevatorShaftPanel );
      add( wallPanel );

      elevatorPanel.add( doorPanel );
      elevatorPanel.add( elevatorLightPanel );
      elevatorPanel.add( bellPanel );
      elevatorPanel.add( elevatorButtonPanel );
   }

   private void initializeAudio()
   {
      SoundEffects sounds = new SoundEffects();
      sounds.setPathPrefix( "" );

      bellClip = sounds.getAudioClip( bellSound );
      doorOpenClip = sounds.getAudioClip( doorOpenSound );
      doorCloseClip = sounds.getAudioClip( doorCloseSound );
      elevatorClip = sounds.getAudioClip( elevatorSound );
      buttonClip = sounds.getAudioClip( buttonSound );
      walkClip = sounds.getAudioClip( walkingSound );
      elevatorMusicClip = sounds.getAudioClip( elevatorMusicSound );
   }

   public void startAnimation()
   {
      if ( animationTimer == null ) {
         animationTimer = new javax.swing.Timer( ANIMATION_DELAY, this );
         animationTimer.start();
      }
      else if ( !animationTimer.isRunning() )
         animationTimer.restart();
   }

   public void stopAnimation()
   {
      animationTimer.stop();
   }

   public void actionPerformed( ActionEvent actionEvent )
   {
      elevatorPanel.animate();

      firstFloorButtonPanel.animate();
      secondFloorButtonPanel.animate();

      Iterator iterator = getPersonAnimatedPanelsIterator();
      while ( iterator.hasNext() ) {
         System.out.println( "action performed" );
         AnimatedPanel personPanel = ( AnimatedPanel ) iterator.next();
         personPanel.animate();
      }
      repaint();
   }

   private Iterator getPersonAnimatedPanelsIterator()
   {
      synchronized( personAnimatedPanels )
      {
         return new ArrayList( personAnimatedPanels ).iterator();
      }
   }

   private void stopWalkingSound()
   {
      //walkClip.stop();
      Iterator iterator = getPersonAnimatedPanelsIterator();
      while ( iterator.hasNext() ) {
         AnimatedPanel panel = ( AnimatedPanel ) iterator.next();
      //   if ( panel.getXVelocity() != 0 )
       //     walkClip.loop();
      }
   }  

   private AnimatedPanel getPersonPanel( PersonMoveEvent event )
   {
      Iterator iterator = getPersonAnimatedPanelsIterator();
      while ( iterator.hasNext() ) {
         AnimatedPanel personPanel = ( AnimatedPanel ) iterator.next();
         if ( personPanel.getID() == event.getID() )
            return personPanel;
      }
      return null;
   }

   public void elevatorDeparted( ElevatorMoveEvent moveEvent )
   {
      System.out.println( "elevator departed" );
      String location = moveEvent.getLocation().getLocationName();
      Iterator iterator = getPersonAnimatedPanelsIterator();
      while ( iterator.hasNext() ) {
         AnimatedPanel personPanel = ( AnimatedPanel ) iterator.next();
         double yPosition = personPanel.getPosition().getY();
         String panelLocation;
         if ( yPosition > secondFloorPosition )
            panelLocation = FIRST_FLOOR_NAME;
         else
            panelLocation = SECOND_FLOOR_NAME;

         int xPosition = ( int ) personPanel.getPosition().getX();
         if ( panelLocation.equals( location ) && xPosition > PERSON_TO_BUTTON_DISTANCE + OFFSET ) {
            remove( personPanel );
            elevatorPanel.add( personPanel, 1 );
            personPanel.setLocation( 2 * OFFSET, 9 * OFFSET );
            personPanel.setMoving( false );
            personPanel.setAnimating( false );
            personPanel.setVelocity( 0, 0 );
            personPanel.setCurrentFrame( 1 );
         }
      }

      if ( location.equals( FIRST_FLOOR_NAME ) )
         elevatorPanel.setVelocity( 0, -elevatorVelocity );
      else if ( location.equals( SECOND_FLOOR_NAME ) )
         elevatorPanel.setVelocity( 0, elevatorVelocity );

      elevatorPanel.setMoving( true );

     // if ( elevatorClip != null )
     //    elevatorClip.play();
     // elevatorMusicClip.play();
   }

   public void elevatorArrived( ElevatorMoveEvent moveEvent )
   {
      System.out.println( "elevator arrived" );
      elevatorPanel.setMoving( false );
      //elevatorMusicClip.stop();

      double xPosition = elevatorPanel.getPosition().getX();
      double yPosition;

      if ( elevatorPanel.getYVelocity() < 0 )
         yPosition = secondFloorPosition - elevatorPanel.getHeight();
      else
         yPosition = firstFloorPosition - elevatorPanel.getHeight();

      elevatorPanel.setPosition( xPosition, yPosition );
   }

   public void personCreated( PersonMoveEvent personEvent )
   {
      System.out.println( "person created" );
      int personID = personEvent.getID();
      String floorLocation = personEvent.getLocation().getLocationName();
      AnimatedPanel personPanel = new AnimatedPanel( personID, personFrames );
      double xPosition = - personPanel.getWidth();
      double yPosition = 0;

      if ( floorLocation.equals( FIRST_FLOOR_NAME ) )
         yPosition = firstFloorPosition + ( firstFloorPanel.getHeight() / 2 );

      else if ( floorLocation.equals( SECOND_FLOOR_NAME ) )
         yPosition = secondFloorPosition + ( secondFloorPanel.getHeight() / 2 );

      yPosition -= personPanel.getHeight();
      
      personPanel.setPosition( xPosition, yPosition );

      int walkFrameOrder[] = { 1, 0, 1, 2 };
      int pressButtonFrameOrder[] = { 1, 3, 3, 4, 4, 1 };
      int walkAwayFrameOrder[] = { 6, 5, 6, 7 };
      personPanel.addFrameSequence( walkFrameOrder );
      personPanel.addFrameSequence( pressButtonFrameOrder );
      personPanel.addFrameSequence( walkAwayFrameOrder );

      personPanel.playAnimation( 0 );
      personPanel.setLoop( true );
      personPanel.setAnimating( true );
      personPanel.setMoving( true );

      double time = ( double ) ( TIME_TO_BUTTON / ANIMATION_DELAY );

      double xDistance = PERSON_TO_BUTTON_DISTANCE - 2 * OFFSET + personPanel.getSize().width;
      double xVelocity = xDistance / time;

      personPanel.setVelocity( xVelocity, 0 );
      personPanel.setAnimationRate( 1 );

//      walkClip.loop();

      synchronized( personAnimatedPanels )
      {
         personAnimatedPanels.add( personPanel );
      }

      add( personPanel, 0 );
   }

   public void personArrived( PersonMoveEvent personEvent )
   {
      System.out.println( "person arrived" );
      AnimatedPanel panel = getPersonPanel( personEvent );

      if ( panel != null ) {
         panel.setMoving( false );
         panel.setAnimating( false );
         panel.setCurrentFrame( 1 );
         stopWalkingSound();

         double xPosition = PERSON_TO_BUTTON_DISTANCE - ( panel.getSize().width / 2 );
         double yPosition = panel.getPosition().getY();
         
         panel.setPosition( xPosition, yPosition );
      }
   }     

   public void personPressedButton( PersonMoveEvent personEvent )
   {
      System.out.println( "person pressed button" );
      AnimatedPanel panel = getPersonPanel( personEvent );

      if ( panel != null ) {
         panel.setLoop( false );
         panel.playAnimation( 1 );
         panel.setVelocity( 0, 0 );
         panel.setMoving( false );
         panel.setAnimating( true );
         stopWalkingSound();
      }
   }

   public void personEntered( PersonMoveEvent personEvent )
   {
      System.out.println( "person entered" );
      AnimatedPanel panel = getPersonPanel( personEvent );
      if ( panel != null ) {
         double time = TIME_TO_ELEVATOR / ANIMATION_DELAY;
         double distance = elevatorPanel.getPosition().getX() - panel.getPosition().getX() + 2 * OFFSET;
         panel.setVelocity( distance / time, -1.5 );
         panel.setMoving( true );
         panel.playAnimation( 0 );
         panel.setLoop( true );
      }
   }

   public void personDeparted( PersonMoveEvent personEvent )
   {
      System.out.println( "person departed" );
      AnimatedPanel panel = getPersonPanel( personEvent );
      if ( panel != null ) {
         double time = TIME_TO_BUTTON / ANIMATION_DELAY;
         double xVelocity = - PERSON_TO_BUTTON_DISTANCE / time;
         panel.setVelocity( xVelocity, 0 );
         elevatorPanel.remove( panel );
         double xPosition = PERSON_TO_ELEVATOR_DISTANCE + 3 * OFFSET;
         double yPosition = 0;
         String floorLocation = personEvent.getLocation().getLocationName();
         if ( floorLocation.equals( FIRST_FLOOR_NAME ) )
            yPosition = firstFloorPosition + ( firstFloorPanel.getHeight() / 2 );
         else if ( floorLocation.equals( SECOND_FLOOR_NAME ) )
            yPosition = secondFloorPosition + ( secondFloorPanel.getHeight() / 2 );

         yPosition -= panel.getHeight();

         panel.setPosition( xPosition, yPosition );
         add( panel, 0 );
         panel.setMoving( true );
         panel.setAnimating( true );
         panel.playAnimation( 2 );
         panel.setLoop( true );
         //walkClip.loop();
      }
   }

   public void personExited( PersonMoveEvent personEvent )
   {
      System.out.println( "person exited" );
      AnimatedPanel panel = getPersonPanel( personEvent );
      if ( panel != null ) {
         panel.setMoving( false );
         panel.setAnimating( false );
         synchronized( personAnimatedPanels )
         {
            personAnimatedPanels.remove( panel );
         }
         remove( panel );
         stopWalkingSound();
      }
   }

   public void doorOpened( DoorEvent doorEvent )
   {
      System.out.println( "door opened" );
      String location = doorEvent.getLocation().getLocationName();
      doorPanel.playAnimation( 0 );
      doorPanel.setAnimationRate( 2 );
      doorPanel.setDisplayLastFrame( true );

     // if ( doorOpenClip != null )
       //  doorOpenClip.play();
   }

   public void doorClosed( DoorEvent doorEvent )
   {
      System.out.println( "door closed" );
      String location = doorEvent.getLocation().getLocationName();
      doorPanel.playAnimation( 1 );
      doorPanel.setAnimationRate( 2 );
      doorPanel.setDisplayLastFrame( true );

//      if ( doorCloseClip != null )
//         doorCloseClip.play();
   }

   public void buttonPressed( ButtonEvent buttonEvent )
   {
      System.out.println( "button pressed" );
      String location = buttonEvent.getLocation().getLocationName();
      if ( location.equals( ELEVATOR_NAME ) ) {
         elevatorButtonPanel.playAnimation( 0 );
         elevatorButtonPanel.setDisplayLastFrame( true );
      }

      else if ( location.equals( FIRST_FLOOR_NAME ) ) {
         firstFloorButtonPanel.playAnimation( 0 );
         firstFloorButtonPanel.setDisplayLastFrame( true );
      }

      else if ( location.equals( SECOND_FLOOR_NAME ) ) {
         secondFloorButtonPanel.playAnimation( 0 );
         secondFloorButtonPanel.setDisplayLastFrame( true );         
      }

 //     if ( buttonClip != null )
   //      buttonClip.play();
   }

   public void buttonReset( ButtonEvent buttonEvent )
   {
      System.out.println( "button reset" );
      String location = buttonEvent.getLocation().getLocationName();
      if ( location.equals( ELEVATOR_NAME ) ) {
         if ( elevatorButtonPanel.isAnimating() )
           elevatorButtonPanel.setDisplayLastFrame( false );
         else
            elevatorButtonPanel.setCurrentFrame( 0 );
      }

      else if ( location.equals( FIRST_FLOOR_NAME ) ) {
         if ( firstFloorButtonPanel.isAnimating() )
            firstFloorButtonPanel.setDisplayLastFrame( false );
         else
            firstFloorButtonPanel.setCurrentFrame( 0 );
      }
      else if( location.equals( SECOND_FLOOR_NAME ) ) {
         if ( secondFloorButtonPanel.isAnimating() )
            secondFloorButtonPanel.setDisplayLastFrame( false );
         else
            secondFloorButtonPanel.setCurrentFrame( 0 );
      }
   }

   public void bellRang( BellEvent bellEvent )
   {
      System.out.println( "bell rang" );
      bellPanel.playAnimation( 0 );
  //    if ( bellClip != null )
  //       bellClip.play();
   }

   public void lightTurnedOn( LightEvent lightEvent )
   {
      System.out.println( "light turned on" );
      elevatorLightPanel.setCurrentFrame( 1 );
      String location = lightEvent.getLocation().getLocationName();

      if ( location.equals( FIRST_FLOOR_NAME ) )
         firstFloorLightPanel.setCurrentFrame( 1 );

      else if ( location.equals( SECOND_FLOOR_NAME ) )
         secondFloorLightPanel.setCurrentFrame( 1 );
   }

   public void lightTurnedOff( LightEvent lightEvent )
   {
      System.out.println( "light turned off" );
      elevatorLightPanel.setCurrentFrame( 0 );
      String location = lightEvent.getLocation().getLocationName();

      if ( location.equals( FIRST_FLOOR_NAME ) )
         firstFloorLightPanel.setCurrentFrame( 0 );

      else if ( location.equals( SECOND_FLOOR_NAME ) )
         secondFloorLightPanel.setCurrentFrame( 0 );
   }

   public Dimension getPreferredSize()
   {
      return new Dimension( VIEW_WIDTH, VIEW_HEIGHT );
   }

   public Dimension getMinimumSize()
   {
      return getPreferredSize();
   }

   public Dimension getMaximumSize()
   {
      return getPreferredSize();
   }
}
